apply plugin: 'com.android.model.application'

model {

    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.3"

        defaultConfig {
            applicationId "com.nyantech.flappycat"
            minSdkVersion.apiLevel 15
            targetSdkVersion.apiLevel 23
            versionCode 1
            versionName "0.1"
        }

        ndk {

            // clang toolchain must compile!
            //
            // https://android.googlesource.com/platform/ndk.git/+/refs/heads/master/CHANGELOG.md
            //
            // GCC is no longer supported. It will not be removed from the NDK just yet, but is no
            // longer receiving backports. It cannot be removed until after libc++ has become stable
            // enough to be the default, as some parts of gnustl are still incompatible with Clang.
            // It will likely be removed after that point.
            //
            // 24.04.2017

            moduleName "flappycat"

            toolchain 'gcc'

            stl 'gnustl_static'
            cppFlags.add('-std=c++14')

            // tag for log system
            if (toolchain == 'clang') {
                cppFlags.add('-DTAG=\\\"FlappyCat\\\"')
            }

            if (toolchain == 'gcc') {
                cppFlags.add('-DTAG="FlappyCat"')
            }

            // enable warnings
            cppFlags.add('-Wall')
            cppFlags.add('-Wextra')
            cppFlags.add('-Werror')
            cppFlags.add('-Wpedantic')

            // disable formatted printf warning rises at 'Log::i(TAG, "some string");
            // when we pass rvalue of a 'const char*' as argument and compiler
            // thinks it can contain some unmatched format specifiers and can lead to
            // security issues, but we are know what are we doing
            cppFlags.add('-Wno-format-security')

            // include path
            cppFlags.add("-I" + file("src/main/jni/engine").absolutePath)
            cppFlags.add("-I" + file("src/main/jni/").absolutePath)

            // libs

            // you can change toolchain to 'gcc' and remove link against 'atomic'
            // https://code.google.com/p/android/issues/detail?id=68779
            // bug is still not fixed (29.07.2016)
            ldLibs.addAll(['log', 'android', 'EGL', 'GLESv2', 'atomic']) // GLESv1_CM, GLESv2
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file("proguard-rules.pro"))
            }
        }
    }
}
